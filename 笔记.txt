
日考 : 抄错题 站

周考 : 分组

   最低的 : 表演节目 跳舞 唱歌 双簧 脱口秀

升实训 : 面试 技巧 题  技能 口才

早晨迟到 : 出去站着

学习方法
    1: 听 2: 练

    作业 : 简单  拔高 思路

    预习

第一天: npm


npm

    3:获取包:
    what?
    包管理器
    命令 npm i xxx  uninstall


    npm i vue

    2:发布包
    npm  :

    3:编写cli
    vue init webpack aaa
    询问
    选择


发包
  1:npm init package.json 文件
  2:main  index.js

  3: 设置代理 npm config set registry http://registry.npmjs.org
  4:npm login
    要求: 代理调整一下 不是淘宝  http://registry.npmjs.org

发包的目的:
  升级:
    let a = require("")
    let newArr = a(arr)


version :  1.0.0

    x.y.z

    z:补丁  修复bug
    y:添加功能
    x:重构

作业:
  1:封装自己的函数库:
  包含
  数组函数:  排序  去重  转换  []==>{}
  对象函数:  {}=>[]

  比如函数传递
  (len,80) 返回一个数组 长度为len 最大值为80 的不重复的数组


  2:预习:  npm 编写cli

day02:
    回顾:

    npm
      init
      install
      uninstall

      //
      npm config set registry http://registry.npmjs.org

      npm 官网注册  邮箱

      npm login 登录


      lodash : merge({},{})  assign   extend: 深拷贝

      {
        [
            {
                []
            }
        ]
      }




      npm publish

    发包

    vue:
    vue init webpack demo :
    项目名字:
    ...
    选择
    >sass
    >less

    编写cli

    commander line interface : 命令行接口


--save-dev : devDependencies 开发环境
babel
eslint
gulp
单元测试
jest


--save : dependencies 线上环境
axios
lodash
antd
elementui


1:新建一个  没有后缀的文件
2:package.json  添加一个bin :{"命令/cuilb":"app"}
3:#! /usr/bin/env node   代表 当前的文件 是一个可执行文件
4:npm link   会把 cuilb 添加到环境变量中
5:执行  cuilb m  / cuilb module


day03:
  import("vue")

  目录
  package.json  main:
  node_modules
  npm -g root

  报错



  express: 搭建一个服务
  koa2   框架:




作业:
   1:发一个包
     打印 cpu信息
          内存信息
          cpu架构

   2:koa 接口
     渲染到页面上


day04:
   中间件: koa 中如何使用
   middleware  js  导出 添加功能
   app.js

   1:创建目录  middleware
   2:创建js文件  导出方法
   3:完善方法


   打印
   1:url
   2:请求方法
   3:请求参数

   下午:

   vue
   sass   7.3  --> 8.0

   npm uninstall sass-loader
   npm install sass-loader@7


koa : 路由

  /
  /home
  /api


koa 路由



  get  params  un...  动态路由     :  模板引擎  ejs <%%>

       后台 : koa


       react vue
       query          ?拼接的参数

day05:

  回顾:
    koa路由

    1:下载包  中间件 npm i koa-router
    2:引入  homeRouter
    3:homeRouter.get("",function(ctx){ctx.query/  post  ctx.request.body})

    4:汇总 router.use("路径",路由的配置信息(router.routes()),router.allowedMethods())

    5:app.use(router.routes()).use(router.allowedMethods())


  路由  接收请求   num=1010101

  promise()
  num 1*2*3... 1010101


  js  promise  async await


上午:

    进程 :
    线程 :

    node
      什么时候使用进程  大量的I Input O output密集计算

      child_process : node提供内置模块

      child_process.方法
      创建进程
      .send()发送
      .on() //接收


      怎么使用进程


var cpus = require('os').cpus().length;
    进程1: 根据传过来的数字 生成订单列表数量
    进程2: 数组的形式 返回N张二维码图片


day06
    回顾:
      进程  包含  线程
      1:引入 child_process
      2:创建 进程对象
        子进程对象 = cp.fork("js") 创建进程

        子进程对象 .send("发送信息")

        .on("message",function(result){
            console.log(result)

        })


        子进程 :

        process  全局对象 进程对象
        process.on("message/error/...",function(msg){
            console.log(msg)

        })


      3:大量的 IO 密集运算  加密


加密
    明文  -->  密文

    加密的手段:
      1:不基于key
        key
        加密 解密

        前端 一个 方法加密  后端 同样的方法 解密

        缺点:  方法一旦暴露


      2:基于key
        1:对称加密  aes
            key : 随便写
            加密 明文 + key

            key : 和加密方相同的key 进行解密



        2:非对称加密
            私钥
            公钥

            A  加密 公钥加密
               私钥 key_A1 : 私有的钥匙
               公钥 key_A2 : 公共的钥匙

            B  解密 私钥解密

            A -->key_A2-->B
            A <--key_B2<--B

Node 怎么加密
    OPENSSL:  库  加密
     C/C++


    js : 接口 node  crypto: 模块

    两大类

     不基于key

     hash加密算法

         md5  :
         sha1 : 特别不安全
         sha2 : 安全  sha256  sha512
         sha3 : 最新
     hmac 加密算法

         key : 私钥  怎么生成

         openssl 命令生成钥匙



加密
   1:基于key
     对称 相同key
        aes  key

     非对称  不同key
       A-->公钥-->B
        私钥
        公钥

       前端  字符串


       A:加密    B:解密
       公钥A     公钥A
       私钥A

       公钥加密

       B的公钥加密  -->密文  B
       hello


     公钥

     私钥 openssl 生成 私钥

   非对称加密
     Rsa  DSA  DH


    1:生成私钥
    2:生成公钥
    3:使用公钥加密 加密
    4:使用私钥解密


   2:不基于key
     hash
        md5  32
        sha1 不用了  32
        sha2 sha256  64  sha512  128
        sha3

day07
   回顾:
   基于key
     对称加密  aes加密算法   android  ios

     非对称机密
        rsa dsa dh

        A:加密   B:解密

        B公钥     B私钥
        A私钥     A公钥

        openssl



   不基于key
     md5  : c/c++  md5
     sha1 : 理论破解
     sha2 : 安全  sha256 sha512
     sha3 :

   node 接口 openssl 库 C/C++

   crypto


day08
   公钥 加密 解密

   ``

   二进制  base64  二进制


   koa 连接数据库

   mysql

   sqlite

    android
    ios

   非结构化数据

   爬虫
   人工智能
   大数据

   nosql


koa
    连接mysql
    1:下载 mysql
    2:建立连接
    3:sql 进行增删改查
    4:请求 接口 返回数据


koa: 服务 + 接口 + 返回数据

     context
        请求 响应
     application
        中间件
        context
        app.use()

     mysql

day09:

egg

    1:

    express
    koa

    java:

    egg:



      MVC 架构模式

      Model : 数据
      View  : 视图
      Controller: 控制

      分层 : 约定


      MVP  : 移动端  android

      MVVM : vue

    egg和koa什么关系
      koa  express
      阿里 基于koa

      约定 : 扩展性

    npm install egg-init -g

    egg-init demo


egg  koa

   1: 约定  MVC  koa
   2: egg-mysql
   3: koa : require  module.exports CommonJs  AMD CMD
   4: egg : import  export es6语法

   方法一:
   npm init egg --type=simple

   npm i

   方式二:
   npm i egg-init -g

   egg-init demo --type=simple

 如何使用


   C : controller 控制 的是 M: V:View

    service : 数据
    连接数据 mysql

    视图层 : Rwact
    Controller
    Service


1:router  : 路由
2:controller : 控制
3:service : 数据









